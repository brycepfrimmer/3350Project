****************************************************
			Comp 3350 - Term Project
    Computerized Maintenance Management System 
 			Designed and Developed By:
                Bryce Pfrimmer
                Cody Edwards
                Darwin  Froese
                Delroy Hiebert
                Zac Medeiros
****************************************************

**NOTE: Please see RepoLocation.txt for the location of the repository and instructions on how to get the source files.

ITERATION 0

Meeting 1: ~1.5 hours Brainstorming project ideas. Decided upon a Vehicle management system.
Meeting 2: ~2 hours Began to come up with some possible user stories.

Zac Medeiros - 1 hour
	- wrote up the inital draft of the Vision statement
Bryce Pfrimmer - 1 hour
	- kept track of the initial draft of the user stories

Meeting 3: ~1.5 hours Collectively went over the User Stories and Vision statement. Broke up into two groups to do an initial edit of each.

Darwin Froese - 1 hour
	- put the final touches on the User Stories before submission
Delroy Hiebert - 1 hour
	- did the final edit on the Vision statement
Cody Edwards - 1 hour
	- put together the final submission and made sure everything was good to go before hand in
	
Note: Outside of meetings there was little time involved as much of work was done during the meetings.
*Missing dates due to late addition to the log

END OF ITERATION 0 SUMMARY:
- Completed Vision Statement
- Completed set of initial 12 Big User Stories with 10 smaller user stories for Iteration 1
For more detail on the User Stories please see "User Stories.pdf"

ITERATION 1

Meeting 1 - Tuesday, January 28, 2014
Discussed where to put log... Determined our TODO list through discussion. We decided that there were a few things we
needed to do right away in order for project work later on to go smoothly. These are the items nearer the top of the list.
We tried to organize the list roughly by importance/what we needed to do first. We also set dates to have the base of our
code done so that further work could be continued by all. Below are the notes taken during the meeting on what was
discussed and required. We also set up our Developer task list for the work to be done after the base code was in place.
This included a rough shot at who was to be in charge of what. Our task list was comprised entirely of smaller parts of
our user stories and assumed that the project was already set up on Git and was at a place that work could be contributed.
TODO
- set up Git - get Github accounts and email/FB/Text Bryce username
- learn to use Git
- learn to use SWT & Windows Builder
- set up base code - Main Screen (GUI), classes/objects, readme of all contents for submission
- Need thorough testing, need stub DB (array list?)
- one week approx. start GUI (Feb. 4th)
- start today basic class files (Jan 28th)
- start setting up DB (Feb 4th?)
- Need batch files for testing...
STUFF TO LEARN
- GIT!
- SWT (install)
- JUNIT
- Windows Builder (download) drag & drop tool

Developer Task List - Iteration 1
1 - Set up object files/classes for project base - 3 days - Delroy/Cody
2 - Create GUI - 3 days - Darwin/Bryce/Zac/Cody/Delroy
3 - Be able to add/remove/view vehicles - 2 days - Darwin/Bryce/Zac
4 - Be able to view vehicle info and then edit it GUI - 1 days - Darwin/Bryce/Zac
5 - Be able to view and modify the parts list GUI - 1 days - Darwin/Bryce/Zac
6 - Be able to track fuel economy of vehicles - 1 day - Delroy/Cody
7 - Have set mandatory fields and checks to ensure requirements are met - 1 days - Delroy/Cody
8 - Be able to input fuel and updated distance driven values - 1 day - Delroy/Cody
9 - Verify fuel economy against set values to catch errors - 1 day - Delroy/Cody
10- Have notifications to alert when data entered raises an issue - 1 day - Delroy/Cody
11- Create test classes for project - on going - ALL

Meeting 2 - Tuesday, February 4, 2014
We started off by making sure everyone was on git and reasonably comfortable enough to commit and push
changes to the project. We finalized the folder structure of our project and created Eclipse .project
and .classpath files so that everyone would be on the same page. We rationalized that aside from the GUI
portion of the project, we would need a Vehicle, Parts List, and Insurance Policy classes. These were
decided upon while we brainstormed what exactly would need to be included information wise for each vehicle.
In our vehicle class, what we ended up deciding upon is included. This changed slightly as we were initially
building our project but solidified once we ready to integrate the vehicle information into the GUI portion.
At this point in the meeting we naturally began to break off into a couple of groups to begin working.
One group began implementing the class structure we would need while the other played around with Windows
Builder to create the start of our CMMS GUI. After approximately two hours we pushed all updates to the
Git repository and set our next meeting for the Thursday of the same week.

Meeting 3 - Thursday, February 6, 2014
Met and continue to work on our class structure. To clarify ideas we drafted a rough outline for the required
classes. Breaking off into a few smaller groups we then also began working on creating a stub database and
continued our work on the main GUI. At this point we needed to decide exactly how our GUI was going to tie into
the structure our Vehicles. We considered a few different ways of displaying the information (Blocks in a grid,
labeled by ID) but decided upon a list view where each aspect of the vehicle was listed horizontally beside the
vehicle ID. After about 2 hours we called the meeting for the night and set the next meeting for next week Tuesday.
NOTE: between people's scheduling and the state that our project was at we decided that a meeting wouldn't be
required. We continued to work communicating through our group chat.

Individual Time Log - Iteration 1

Friday, February 7, 2014
Delroy Hiebert - 2.5 hours
	- Set up initial Vehicle class (Task 1)
	- Optimized vehicle class with specific methods
	- Improved reusability
	- Cleaned up code

Saturday, February 8, 2014
Delroy Hiebert - 1 hour 
	- Added interface class (Task 1)
	- MyTest (and GUI) talk to database through interface
	- Minor bug fixes
	- Added checks for valid data (Task 7)
	- Add User Story "Fuel Economy" to task list
Darwin Froese - 1.5 hours
	- Created a basic user interface for the main window (Task 2)
	- There is a bug in the adding a vehicle code... If you "X out" of all the prompts it adds a "null object" which breaks in the foreach search. FIXED

Sunday, February 9, 2014
Delroy Hiebert - 1 hour
	- Bug fixes
	- Added additional checks (Task 7)

Monday, February 10, 2014
Bryce Pfrimmer - 2 hours
	- set up add/view screen for vehicles
	- put in hooks for the vehicles to be printed to the list

Tuesday, February 11, 2014
Delroy Hiebert - 5 hours
	- Added vailidity checks for adding new vehicle (Task 7)
	- Cloned addVehicle class for editing vehicles (Task 4)
	- Updated vehicle methods (Task 1)
	- Removed private classes from vehicle class into their own file (Task 1)
	- created test classes for all testable files (vehicle, insurance policy, partslist) (Task 11)
	- created test suite to run all test classes (Task 11)
Darwin Froese - 6 hours
	- Formatted the DataTable properly
	- Modified the interface to the database for allowing adding of vehicles to table
	- Set-up adding vehicles to the database
Cody Edwards - 3 hours
	- Added warning messages to Add Vehicles
	- Cleaned code up

Wednesday, February 12, 2014
Darwin Froese - 2 hours
	- Restructured Interface to StudDB
	- Added the ability to Edit Vehicles
	- Added the ability to View Vehicles
Bryce Pfrimmer - 1 hour
	- bug fix

Thursday, February 13, 2014
Zac Medeiros - 5 hours
	- batch files
	- testing on windows 64 platform
	- adjusting test cases to work with bat's
Cody Edwards Feb 13, 2014 - 7 hours
	- Cleaned code up
	- Added overlooked things ie. toggling check boxes with the enter key
	- Added fuel economy tracking
	- Linked fuel economy to gui
	- Separate parts list class out of vehicle
	- Parts list now modifiable

Friday, February 14, 2014
Zac Medeiros - 4 hours
	- getting project ready for submission (sketch, formatting code and log/readme files, folder structure, win64 testing)
Bryce Pfrimmer - 4 hours
	- getting project ready for submission (sketch, formatting code and log/readme files, folder structure, win64 testing)

=======
END OF ITERATION 1 SUMMARY:
- Completed Task 1: object files and classes required for project - total 2 days
- Completed Task 2: Created GUI required for project - total 3 days
- Completed Task 3: Can add/remove vehicles and can edit vehicles - total 2 days
- Completed Task 4: Can view and edit vehicle information. - total .5 day
- Completed Task 5: Can view and modify parts list. - total .5 day
- Completed Task 6: Can track fuel economy. - total 1 day
- Completed Task 7: Only valid data may be entered, object only created when good data is entered - total 1 day
- Completed task 8: Class can update fuel economy and linked to GUI - total 2 days
- Completed Task 9: Does verify updated fuel economy. - total 1 day
- Completed Task 10: GUI prompts when invalid data is entered - total 2 days
- Completed Task 11: Create test classes for project - on going

BUGS
No detected bugs. Room for improvement in error checking in business classes and interface, and how they communicate and 
complement each other. In addition:
	- On main screen, disable buttons when there is no selection instead of throwing a notification error when they do select it
	- Fix sizing along the top of the list view in the main window to show all of the text in each column
	- Add a "Quit" or "Close" button on the view vehicle screen
	- layout to add/edit vehicle & possible combine them??
=======
"Big" User Stories for Iteration 2:
Time or Usage based tracking - 5 days
Searching - 3 days
Modifying Vehicle adding criteria - 5 days
Daily Tasks - 3 days

For more detail please see "User Stories.pdf"

Other Tasks for Iteration 2:
- Implement SQL database - 3 days
- Implement integration tests

The four Big user stories listed above are the next four in our list and are the four that we intended to implement in iteration 2.
As of right now our initial plan hasn't changed at all. This might be different over this next iteration.
=======

ITERATION 2

Meeting 1 - Tuesday, February 25, 2014
Met up for 30 minutes, discussed the small issues in Iteration 1 (see above BUGS) & determined who was going to work on what for the current
iteration. Set the next meeting for next Tuesday with the goal of having most of the code working by then. Discussed possibly moving
some of the Stories from Iteration 3 up to this iteration but decided that we would finish the Stories for Iteration 2 before doing so.
Set the task list.

Developer Task List - Iteration 2
1 - Implement HSQLDB - 3 days - Zac
2 - Implement integration tests and expanding unit tests - 4 days - Delroy
3 - Add in time or usage based tracking - 5 days - Bryce
4 - Add in search functionality - 3 days - Darwin
5 - Include modification of vehicle addition criteria - 5 days - Cody
6 - Fix small issues from Iteration 1 (see BUGS section in Iteration 1 Summary) - 1 day - Darwin
7 - Look into hiding/displaying certain columns in the main GUI list view - 1 day - Darwin
8- Create test classes for project - on going - ALL

Friday, February 28th, 2014
Cody Edwards
	4.5 Hours - Added modification of vehicle addition criteria. Tweaked Vehicle class default values and input validation so that empty fields would print
		in the main window. 

Saturday, March 1st, 2014
Darwin Froese
	4 Hours - Added searching, tweaked View Window UI, and added a few bug fixes to main UI. Tweaked StubDB and interface to handle searching
		  in a manner that flows with how it is done from the main UI.
		  
Sunday, March 2nd, 2014
Bryce Pfrimmer
	3.5 Hours - worked on adding time/usage based tracking ( UpdateList() called from CMMS main GUI makes the list "shake" && we shouldn't
	be able to add duplicate parts to the "PartsList" && kmLastServiced 2 places)

Monday, March 3rd, 2014
Bryce Pfrimmer
	4 Hours - Restructuring for the implementation of time/usage based tracking. (Vehicle ID's should be all be different && addServiceEvent shouldn't work
	if there are no parts on the vehicle && get date last serviced when a vehicle is created && edit and view vehicle needs date last serviced)
	
Thursday, March 6th, 2014
Cody Edwards
	3 Hours - Duplicate Vehicle ID's are no longer allowed, neither are duplicate parts.  There was also a bug that
		didn't allow you to remove parts. This has now been fixed.
		
Friday, March 7th, 2014
Delroy Hiebert
	6 hours - switched entire project over to follow three tier architecture.
			-added business and persistence classes
			-added tests for new classes
		
Friday, March 7th, 2014
Cody Edwards
	2 Hours - addServiceEvent now doesn't work if there are no parts on the vehicle, edit window now has dateLastServiced
	
Saturday, March 8th, 2014
Delroy Hiebert
	1 hour - refactored some parts of project. Eliminated vehicle interface and replaced it with enum

Sunday, March 9th, 2014
Darwin Froese
	3 Hours - Time based tracking changes background color instead of foreground color
		- Searching updates main table and resets upon adding vehicle or clear button being clicked
		- Changed searching backend to compare lower case search key and lower case data
		- Table headers can be shown or hidden using the view menu
		
Sunday, March 9th, 2014
Delroy Hiebert
	1 hour - Added integration test for HSQLDB
	
Sunday, March 9th, 2014
Cody Edwards
	4 hours - Added Daily Tasks and now appropriate buttons are disabled when not selected.
	
Monday, March 10th, 2014
Cody Edwards
	1 hour - Fixed bug where it wouldn't remove parts with service items.
	
Monday, March 10th, 2014
Bryce Pfrimmer
	4 hours - Integrating HSQLDB

=======
END OF ITERATION 2 SUMMARY:
Developer Task List - Iteration 2
1 - Partially Completed Task - Implement HSQLDB - 3 days - *Zac - now absent* Darwin & Bryce took over
2 - Completed Task - Implement integration tests and expanding unit tests - 4 days - Delroy
3 - Completed Task - Add in time or usage based tracking - 5 days - Bryce
4 - Completed Task - Add in search functionality - 3 days - Darwin
5 - Completed Task - Include modification of vehicle addition criteria - 5 days - Cody
6 - Completed Task - Fix small issues from Iteration 1 (see BUGS section in Iteration 1 Summary) - 1 day - Darwin
7 - Completed Task - Look into hiding/displaying certain columns in the main GUI list view - 1 day - Darwin
8- Create test classes for project - on going - ALL

BUGS
No detected bugs.

******NOTE******
DURING ITR 2
Due to a team member suddenly and unexpectedly leaving the group with the bulk of the HSQL code, we were forced to complete
almost all of our HSQL integration within 24 hours of the deadline. We were unable to get HSQL completely integrated due to
the way we were physically getting the data from the database.

For this reason we created a new branch in our GitHub repository. **Itr2WorkingFunctionality**
At this point in master we had all of our functionality working for our Iteration 3 stories, just without the HSQL DB.
To checkout our functionality please see this branch, re-running Compile.bat and Run.bat.

I've also included a subfolder in the submission called Itr2WorkingFunctionality which contains the code to do this.

=======
"Big" User Stories for Iteration 3:
Supply list for maintenance - as maintenance personnel I want to have access to a list of supplies I need for maintenance - 4 days
Category Views - as a user I want to be able to break down the list of vehicles into categorized views - 4 days
Batch Editing - as a user I should be able to edit fields that are common to multiple vehicles at the same time - 3 days
Printing - as a user I need to be able to print information and details about a vehicle - 4 days

Other Tasks for Iteration 3:
Acceptance Tests

The four Big user stories listed above are the next four in our list and are the four that we intended to implement in iteration 3.
As of right now our initial plan hasn't changed at all. This might be different over this next iteration.
=======
March 14 - 2014
	Darwin Froese - 2 Hours
		Finished Implementing HSQLDB
March 14 - 2014
	Cody Edwards - 1.5 Hours
		Changed all date objects to gregorian calendar objects
March 16 - 2014
	Cody Edwards - 2 Hours
		Changed edit vehicles window to also take into account mandatory fields
March 18 - 2014
	Cody Edwards - 1 Hour
		Fixed issues with calendar not working with the database
March 19 -2014
	Cody Edwards - 1.5 Hours
		Added printing to the viewVehicle window
March 20 - 2014
	Darwin Froese - 6 Hours
		* Refactored interacting with vehicles in database
		for searching and sorting purposes
		* Re-Implemented searching
		* Implemented table sorting
		* Refactored some strings from Lists to Maps
		* Added individual Comparator classes for each vehicle
		field to aid in sorting ArrayLists
March 20 - 2014
	Delroy Hiebert - 5 Hours
		-Update integration tests
			-More thorough and covers much more area
		-Fixed bug - system did not update fuel economy from database
March 21 - 2014
	Darwin Froese - 1 Hour
		* AccessVehicle.addVehicle modified to only insert
		if the ID has not been used returns a boolean for
		success/fail
		* Fixed the database so all tests pass. Cannot
		remove element from a list while iterating through
		a list and changed UpdateKM to call UpdateVehicle
		so that the update code is only written once
March 22 - 2014
	Cody Edwards - 1.5 Hours
		Moved addServiceButton from main CMMS window to the editParts window. - not fully functional yet
March 24 - 2014
	Bryce Pfrimmer - 3 Hours
		Refactoring - Created new tables to more efficiently persist the Parts and Service Items of a Vehicle
		
March 24 - 2014
	Delroy Hiebert 2 - Hours
		Started to figure out how atr acceptance testing works
			-Started making basic changes to project
March 24 - 2014
	Cody Edwards - 2.5 Hours
		Add service button should now work in the edit parts window
		Fixed bug in dataAccessObject where it thought valid service items with kms service items were invalid
			
March 25 - 2014
	Team Meeting - 1.5 Hours
		Discussed progress on user stories for iteration 3
		Ensured everyone team member is on the same page before the iteration wraps up
		Discussed team 'Retrospective Activity'
		Goal: Be ready for submission by the 28th despite additional time given
		
March 25 - 2014
	Delroy Hiebert - 3 Hours
		-Began developing acceptance tests
		-Continued learning how atr works - slow process
March 25 - 2014
	Cody Edwards- 2 Hours
		Fixed bug that wouldn't let you add a service item to a part that already had a service item
		Daily tasks now launches again on startup
		CMMS is now fullscreen on startup
		moved Quit button in CMMS to the bottom
		
March 26 - 2014
	Delroy Hiebert - 10 Hours
		-Minor refactoring throughout project
			-Changed some variable names to be standard throughout the project
				-Mainly shell and display
		-Completed acceptance tests for 5 major user stories
			-Add, view, edit, update fuel economy, delete
		-Started search, requires some work still
		-Still need acceptance tests for a few other user stories
		
March 27 - 2014
	Cody Edwards - 2 Hours
		Adding or editing vehicles doesn't let input anything that isn't between 1900-currentYear+2 and years are now in a drop down menu
		Edit vehicle now displays that proper date
		
March 27 - 2014
	Delroy Hiebert - 6 Hours
		Typed up Retrospective Activity
		Completed searching acceptance test
			-Tried to interact with widget, ended up doing a bypass
		Changed test .bat files to clear the database before running and restoring the database afterwards
		Fixed minor issues with previous push (accidently eliminated 2 small pieces of code)
		
