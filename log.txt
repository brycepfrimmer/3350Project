****************************************************
			Comp 3350 - Term Project
    Computerized Maintenance Management System 
 			Designed and Developed By:
                Bryce Pfrimmer
                Cody Edwards
                Darwin  Froese
                Delroy Hiebert
                Zac Medeiros
****************************************************

ITERATION 1

Meeting 1 - Tuesday, January 28, 2014
Discussed where to put log... Determined our TODO list through discussion. We decided that there were a few things we
needed to do right away in order for project work later on to go smoothly. These are the items nearer the top of the list.
We tried to organize the list roughly by importance/what we needed to do first. We also set dates to have the base of our
code done so that further work could be continued by all. Below are the notes taken during the meeting on what was
discussed and required. We also set up our Developer task list for the work to be done after the base code was in place.
This included a rough shot at who was to be in charge of what. Our task list was comprised entirely of smaller parts of
our user stories and assumed that the project was already set up on Git and was at a place that work could be contributed.
TODO
- set up Git - get Github accounts and email/FB/Text Bryce username
- learn to use Git
- learn to use SWT & Windows Builder
- set up base code - Main Screen (GUI), classes/objects, readme of all contents for submission
- Need thorough testing, need stub DB (array list?)
- one week approx. start GUI (Feb. 4th)
- start today basic class files (Jan 28th)
- start setting up DB (Feb 4th?)
- Need batch files for testing...
STUFF TO LEARN
- GIT!
- SWT (install)
- JUNIT
- Windows Builder (download) drag & drop tool

Developer Task List - Iteration 1
1 - Set up object files/classes for project base - 3 days - Delroy/Cody
2 - Create GUI - 3 days - Darwin/Bryce/Zac/Cody/Delroy
3 - Be able to add/remove/view vehicles - 2 days - Darwin/Bryce/Zac
4 - Be able to view vehicle info and then edit it GUI - 1 days - Darwin/Bryce/Zac
5 - Be able to view and modify the parts list GUI - 1 days - Darwin/Bryce/Zac
6 - Be able to track fuel economy of vehicles - 1 day - Delroy/Cody
7 - Have set mandatory fields and checks to ensure requirements are met - 1 days - Delroy/Cody
8 - Be able to input fuel and updated distance driven values - 1 day - Delroy/Cody
9 - Verify fuel economy against set values to catch errors - 1 day - Delroy/Cody
10- Have notifications to alert when data entered raises an issue - 1 day - Delroy/Cody
11- Create test classes for project - on going - ALL

Meeting 2 - Tuesday, February 4, 2014
We started off by making sure everyone was on git and reasonably comfortable enough to commit and push
changes to the project. We finalized the folder structure of our project and created Eclipse .project
and .classpath files so that everyone would be on the same page. We rationalized that aside from the GUI
portion of the project, we would need a Vehicle, Parts List, and Insurance Policy classes. These were
decided upon while we brainstormed what exactly would need to be included information wise for each vehicle.
In our vehicle class, what we ended up deciding upon is included. This changed slightly as we were initially
building our project but solidified once we ready to integrate the vehicle information into the GUI portion.
At this point in the meeting we naturally began to break off into a couple of groups to begin working.
One group began implementing the class structure we would need while the other played around with Windows
Builder to create the start of our CMMS GUI. After approximately two hours we pushed all updates to the
Git repository and set our next meeting for the Thursday of the same week.

Meeting 3 - Thursday, February 6, 2014
Met and continue to work on our class structure. To clarify ideas we drafted a rough outline for the required
classes. Breaking off into a few smaller groups we then also began working on creating a stub database and
continued our work on the main GUI. At this point we needed to decide exactly how our GUI was going to tie into
the structure our Vehicles. We considered a few different ways of displaying the information (Blocks in a grid,
labeled by ID) but decided upon a list view where each aspect of the vehicle was listed horizontally beside the
vehicle ID. After about 2 hours we called the meeting for the night and set the next meeting for next week Tuesday.
NOTE: between people's scheduling and the state that our project was at we decided that a meeting wouldn't be
required. We continued to work communicating through our group chat.

Individual Time Log - Iteration 1

Friday, February 7, 2014
Delroy Hiebert - 2.5 hours
	- Set up initial Vehicle class (Task 1)
	- Optimized vehicle class with specific methods
	- Improved reusability
	- Cleaned up code

Saturday, February 8, 2014
Delroy Hiebert - 1 hour 
	- Added interface class (Task 1)
	- MyTest (and GUI) talk to database through interface
	- Minor bug fixes
	- Added checks for valid data (Task 7)
	- Add User Story "Fuel Economy" to task list
Darwin Froese - 1.5 hours
	- Created a basic user interface for the main window (Task 2)
	- There is a bug in the adding a vehicle code... If you "X out" of all the prompts it adds a "null object" which breaks in the foreach search. FIXED

Sunday, February 9, 2014
Delroy Hiebert - 1 hour
	- Bug fixes
	- Added additional checks (Task 7)

Monday, February 10, 2014
Bryce Pfrimmer - 2 hours
	- set up add/view screen for vehicles
	- put in hooks for the vehicles to be printed to the list

Tuesday, February 11, 2014
Delroy Hiebert - 5 hours
	- Added vailidity checks for adding new vehicle (Task 7)
	- Cloned addVehicle class for editing vehicles (Task 4)
	- Updated vehicle methods (Task 1)
	- Removed private classes from vehicle class into their own file (Task 1)
	- created test classes for all testable files (vehicle, insurance policy, partslist) (Task 11)
	- created test suite to run all test classes (Task 11)
Darwin Froese - 6 hours
	- Formatted the DataTable properly
	- Modified the interface to the database for allowing adding of vehicles to table
	- Set-up adding vehicles to the database
Cody Edwards - 3 hours
	- Added warning messages to Add Vehicles
	- Cleaned code up

Wednesday, February 12, 2014
Darwin Froese - 2 hours
	- Restructured Interface to StudDB
	- Added the ability to Edit Vehicles
	- Added the ability to View Vehicles
Bryce Pfrimmer - 1 hour
	- bug fix

Thursday, February 13, 2014
Zac Medeiros - 5 hours
	- batch files
	- testing on windows 64 platform
	- adjusting test cases to work with bat's
Cody Edwards Feb 13, 2014 - 7 hours
	- Cleaned code up
	- Added overlooked things ie. toggling check boxes with the enter key
	- Added fuel economy tracking
	- Linked fuel economy to gui
	- Separate parts list class out of vehicle
	- Parts list now modifiable

Friday, February 14, 2014
Zac Medeiros - 4 hours
	- getting project ready for submission (sketch, formatting code and log/readme files, folder structure, win64 testing)
Bryce Pfrimmer - 4 hours
	- getting project ready for submission (sketch, formatting code and log/readme files, folder structure, win64 testing)

=======
END OF ITERATION 1 SUMMARY:
- Completed Task 1: object files and classes required for project - total 2 days
- Completed Task 2: Created GUI required for project - total 3 days
- Completed Task 3: Can add/remove vehicles and can edit vehicles - total 2 days
- Completed Task 4: Can view and edit vehicle information. - total .5 day
- Completed Task 5: Can view and modify parts list. - total .5 day
- Completed Task 6: Can track fuel economy. - total 1 day
- Completed Task 7: Only valid data may be entered, object only created when good data is entered - total 1 day
- Completed task 8: Class can update fuel economy and linked to GUI - total 2 days
- Completed Task 9: Does verify updated fuel economy. - total 1 day
- Completed Task 10: GUI prompts when invalid data is entered - total 2 days
- Completed Task 11: Create test classes for project - on going
=======
"Big" User Stories for Iteration 2:
Time or Usage based tracking - 5 days
Searching - 3 days
Modifying Vehicle adding criteria - 5 days
Daily Tasks - 3 days
For more detail please see "User Stories.pdf"

Other Tasks for Iteration 2:
- Implement SQL database - 3 days
- Implement integration tests

The four Big user stories listed above are the next four in our list and are the four that we intended to implement in iteration 2.
As of right now our initial plan hasn't changed at all. This might be different over this next iteration.
=======
